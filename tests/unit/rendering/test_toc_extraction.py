"""
Tests for TOC structure extraction from HTML.

Tests the extract_toc_structure() function which parses TOC HTML
(generated by mistune or python-markdown) into structured data
for custom TOC rendering with grouping and collapsing.
"""

from bengal.rendering.pipeline import extract_toc_structure


class TestTOCExtractionMistune:
    """Test TOC extraction from mistune-style flat HTML with indentation."""

    def test_simple_h2_headings(self):
        """Test extraction of simple H2 headings (no nesting)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#overview">Overview</a></li>
<li><a href="#features">Features</a></li>
<li><a href="#installation">Installation</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 3
        assert items[0] == {"id": "overview", "title": "Overview", "level": 1}
        assert items[1] == {"id": "features", "title": "Features", "level": 1}
        assert items[2] == {"id": "installation", "title": "Installation", "level": 1}

    def test_h2_with_h3_nesting(self):
        """Test H2 headings with nested H3 headings (2 space indent)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#overview">Overview</a></li>
  <li><a href="#what-is-it">What is it?</a></li>
  <li><a href="#why-use-it">Why use it?</a></li>
<li><a href="#features">Features</a></li>
  <li><a href="#fast">Fast</a></li>
  <li><a href="#flexible">Flexible</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 6
        assert items[0] == {"id": "overview", "title": "Overview", "level": 1}
        assert items[1] == {"id": "what-is-it", "title": "What is it?", "level": 2}
        assert items[2] == {"id": "why-use-it", "title": "Why use it?", "level": 2}
        assert items[3] == {"id": "features", "title": "Features", "level": 1}
        assert items[4] == {"id": "fast", "title": "Fast", "level": 2}
        assert items[5] == {"id": "flexible", "title": "Flexible", "level": 2}

    def test_deep_nesting(self):
        """Test H2, H3, H4, H5 nesting (0, 2, 4, 6 space indents)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#h2">H2 Heading</a></li>
  <li><a href="#h3">H3 Heading</a></li>
    <li><a href="#h4">H4 Heading</a></li>
      <li><a href="#h5">H5 Heading</a></li>
<li><a href="#h2-2">H2 Another</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 5
        assert items[0]["level"] == 1  # H2
        assert items[1]["level"] == 2  # H3
        assert items[2]["level"] == 3  # H4
        assert items[3]["level"] == 4  # H5
        assert items[4]["level"] == 1  # H2

    def test_emoji_in_headings(self):
        """Test headings with emoji (common in docs)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#overview">ðŸŽ¯ Overview</a></li>
  <li><a href="#what-is">What is it?</a></li>
<li><a href="#features">ðŸ“Š Features</a></li>
  <li><a href="#fast">âš¡ Fast</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 4
        assert items[0]["title"] == "ðŸŽ¯ Overview"
        assert items[1]["title"] == "What is it?"
        assert items[2]["title"] == "ðŸ“Š Features"
        assert items[3]["title"] == "âš¡ Fast"

    def test_special_characters_in_titles(self):
        """Test titles with special characters."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#config">1. Configuration</a></li>
<li><a href="#output">2. Output & Results</a></li>
<li><a href="#api">API: Functions & Classes</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 3
        assert items[0]["title"] == "1. Configuration"
        assert items[1]["title"] == "2. Output & Results"
        assert items[2]["title"] == "API: Functions & Classes"

    def test_empty_toc(self):
        """Test with empty TOC."""
        items = extract_toc_structure("")
        assert items == []

        items = extract_toc_structure('<div class="toc"><ul></ul></div>')
        assert items == []

    def test_single_heading(self):
        """Test with single heading."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#only">Only Heading</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 1
        assert items[0] == {"id": "only", "title": "Only Heading", "level": 1}


class TestTOCExtractionPythonMarkdown:
    """Test TOC extraction from python-markdown nested HTML."""

    def test_nested_ul_structure(self):
        """Test extraction from nested <ul> elements (python-markdown style)."""
        # Python-markdown uses nested <ul> tags instead of indentation
        toc_html = """<div class="toc">
<ul>
<li><a href="#overview">Overview</a>
  <ul>
    <li><a href="#what-is">What is it?</a></li>
  </ul>
</li>
<li><a href="#features">Features</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        # Should handle nested UL structure
        assert len(items) > 0
        # The nested item should have higher level
        assert any(item["level"] > 1 for item in items)


class TestTOCExtractionRealWorld:
    """Test with real-world TOC examples."""

    def test_health_checks_doc_structure(self):
        """Test with structure similar to health-checks.md doc."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#overview">ðŸŽ¯ Overview</a></li>
  <li><a href="#what-is-the-health-check-system">What is the Health Check System?</a></li>
  <li><a href="#why-health-checks">Why Health Checks?</a></li>
<li><a href="#the-9-validators">ðŸ“Š The 9 Validators</a></li>
  <li><a href="#1-configuration-validator">1. Configuration Validator</a></li>
  <li><a href="#2-output-validator">2. Output Validator</a></li>
  <li><a href="#3-menu-validator">3. Menu Validator</a></li>
<li><a href="#usage-examples">ðŸš€ Usage Examples</a></li>
  <li><a href="#basic-usage">Basic Usage</a></li>
  <li><a href="#python-api">Python API</a></li>
<li><a href="#best-practices">ðŸŽ¯ Best Practices</a></li>
  <li><a href="#development-workflow">Development Workflow</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        # Should extract all items
        assert len(items) == 12

        # Check H2 sections (level 1)
        h2_items = [item for item in items if item["level"] == 1]
        assert len(h2_items) == 4
        assert h2_items[0]["title"] == "ðŸŽ¯ Overview"
        assert h2_items[1]["title"] == "ðŸ“Š The 9 Validators"
        assert h2_items[2]["title"] == "ðŸš€ Usage Examples"
        assert h2_items[3]["title"] == "ðŸŽ¯ Best Practices"

        # Check H3 sections (level 2)
        h3_items = [item for item in items if item["level"] == 2]
        assert len(h3_items) == 8
        assert h3_items[0]["title"] == "What is the Health Check System?"
        assert h3_items[2]["title"] == "1. Configuration Validator"

    def test_complex_nested_doc(self):
        """Test with complex multi-level nesting."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#api-reference">API Reference</a></li>
  <li><a href="#core-functions">Core Functions</a></li>
    <li><a href="#build">build()</a></li>
      <li><a href="#build-options">Options</a></li>
    <li><a href="#serve">serve()</a></li>
  <li><a href="#utilities">Utilities</a></li>
    <li><a href="#logger">Logger</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        assert len(items) == 7
        assert items[0]["level"] == 1  # API Reference (H2)
        assert items[1]["level"] == 2  # Core Functions (H3)
        assert items[2]["level"] == 3  # build() (H4)
        assert items[3]["level"] == 4  # Options (H5)
        assert items[4]["level"] == 3  # serve() (H4)
        assert items[5]["level"] == 2  # Utilities (H3)
        assert items[6]["level"] == 3  # Logger (H4)


class TestTOCExtractionEdgeCases:
    """Test edge cases and error handling."""

    def test_malformed_html(self):
        """Test with malformed HTML (should not crash)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#test">Test"""  # Missing closing tags

        items = extract_toc_structure(toc_html)
        # Should return empty list or partial results, but not crash
        assert isinstance(items, list)

    def test_no_links(self):
        """Test TOC with no actual links."""
        toc_html = """<div class="toc">
<ul>
<li>Plain text</li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)
        assert items == []

    def test_inconsistent_indentation(self):
        """Test with inconsistent indentation (3 spaces instead of 2)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#h2">H2</a></li>
   <li><a href="#h3">H3 (3 spaces)</a></li>
</ul>
</div>"""

        items = extract_toc_structure(toc_html)

        # Should still parse, but level might be unexpected
        assert len(items) == 2
        assert items[0]["level"] == 1
        # 3 spaces / 2 = 1.5, rounds to 1, + 1 = level 2
        assert items[1]["level"] == 2


class TestTOCExtractionCaching:
    """Test scenarios related to caching."""

    def test_identical_input_returns_same_result(self):
        """Test that same input returns same output (idempotency)."""
        toc_html = """<div class="toc">
<ul>
<li><a href="#test">Test</a></li>
</ul>
</div>"""

        items1 = extract_toc_structure(toc_html)
        items2 = extract_toc_structure(toc_html)

        assert items1 == items2

    def test_whitespace_variations(self):
        """Test that whitespace in HTML doesn't affect extraction."""
        toc1 = """<div class="toc">
<ul>
<li><a href="#test">Test</a></li>
</ul>
</div>"""

        toc2 = """<div class="toc"><ul><li><a href="#test">Test</a></li></ul></div>"""

        items1 = extract_toc_structure(toc1)
        items2 = extract_toc_structure(toc2)

        # Both should extract the same item
        assert len(items1) == len(items2) == 1
        assert items1[0]["id"] == items2[0]["id"] == "test"
