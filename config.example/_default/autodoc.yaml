# =============================================================================
# Autodoc Configuration
# =============================================================================
# Automatic API documentation generation from source code
#
# See: architecture/autodoc.md

# -----------------------------------------------------------------------------
# Python API Documentation
# -----------------------------------------------------------------------------
autodoc:
  python:
    enabled: true

    # Source directories to scan for Python modules
    source_dirs:
      - "src"
      # - "lib"

    # Output directory for generated markdown files (relative to content_dir)
    output_dir: "api"

    # Docstring style detection (google, numpy, sphinx, auto)
    docstring_style: "auto"

    # Exclude patterns (glob format)
    exclude:
      - "**/test_*.py"
      - "**/__pycache__/**"
      - "**/.*"

    # Include private members (prefixed with _)
    include_private: false

    # Include undocumented items (no docstring)
    include_undocumented: false


# =============================================================================
# URL Grouping (NEW!)
# =============================================================================
# Three modes to organize API documentation URLs:
#
# 1. OFF (default)   - No grouping, follows exact Python package structure
# 2. AUTO            - Auto-detect groups from __init__.py hierarchy (RECOMMENDED)
# 3. EXPLICIT        - Manual control with custom group names (power users)

# -----------------------------------------------------------------------------
# Mode 1: OFF (Default)
# -----------------------------------------------------------------------------
# No grouping - URLs follow Python package structure exactly
#
# Example structure:
#   myproject/
#   ├── core/
#   │   ├── __init__.py
#   │   └── site.py
#   └── utils/
#       ├── __init__.py
#       └── helpers.py
#
# Generated URLs:
#   myproject.core.site      → /api/myproject/core/site/
#   myproject.utils.helpers  → /api/myproject/utils/helpers/
#
# Config:
#   autodoc:
#     python:
#       grouping:
#         mode: "off"  # (this is the default)


# -----------------------------------------------------------------------------
# Mode 2: AUTO (Recommended) ⭐
# -----------------------------------------------------------------------------
# Auto-detect grouping from __init__.py files
# - Zero maintenance - adapts automatically when you add new packages
# - Groups modules under their parent package
# - Optional strip_prefix to clean up URLs
#
# Example structure:
#   myproject/
#   ├── __init__.py              # Root package
#   ├── core/
#   │   ├── __init__.py          # Creates "core" group
#   │   └── site.py
#   ├── cli/
#   │   ├── __init__.py
#   │   └── templates/
#   │       ├── __init__.py      # Creates "templates" group (nested)
#   │       └── blog.py
#   └── utils/
#       ├── __init__.py          # Creates "utils" group
#       └── helpers.py
#
# Generated URLs (with strip_prefix):
#   myproject.core.site              → /api/core/site/
#   myproject.cli.templates.blog     → /api/templates/blog/  (grouped under templates)
#   myproject.utils.helpers          → /api/utils/helpers/
#
# Config:
#   autodoc:
#     python:
#       strip_prefix: "myproject."  # Optional: clean up URLs
#       grouping:
#         mode: "auto"


# -----------------------------------------------------------------------------
# Mode 3: EXPLICIT (Power Users)
# -----------------------------------------------------------------------------
# Manual control with custom group names
# - Define exact prefix_map for fine-grained control
# - Use when you need non-standard organization
# - Longest prefix wins when multiple match
#
# Example: Custom group names
#   myproject.core.*              → /api/core-api/*
#   myproject.cli.templates.*     → /api/template-system/*
#   myproject.utils.*             → /api/utilities/*
#
# Config:
#   autodoc:
#     python:
#       strip_prefix: "myproject."
#       grouping:
#         mode: "explicit"
#         prefix_map:
#           core: "core-api"
#           cli.templates: "template-system"
#           utils: "utilities"


# -----------------------------------------------------------------------------
# Real-World Example: Django-like structure
# -----------------------------------------------------------------------------
# Project structure:
#   django/
#   ├── db/
#   │   ├── __init__.py
#   │   ├── models/
#   │   │   ├── __init__.py
#   │   │   ├── base.py
#   │   │   └── fields.py
#   │   └── backends/
#   │       ├── __init__.py
#   │       └── postgresql.py
#   └── http/
#       ├── __init__.py
#       └── request.py
#
# AUTO mode result:
#   django.db.models.base            → /api/models/base/
#   django.db.models.fields          → /api/models/fields/
#   django.db.backends.postgresql    → /api/backends/postgresql/
#   django.http.request              → /api/http/request/
#
# Note: "models" and "backends" become top-level groups (they have __init__.py)
#
# Config:
#   autodoc:
#     python:
#       strip_prefix: "django."
#       grouping:
#         mode: "auto"


# =============================================================================
# Migration Guide
# =============================================================================
# Existing sites: No action required (mode: "off" is default)
#
# To enable auto-grouping:
# 1. Add strip_prefix and grouping config (see Mode 2 above)
# 2. Test with: bengal autodoc --dry-run
# 3. Check output for URL changes
# 4. If URLs changed, consider adding redirects for old paths
# 5. Deploy
#
# URL stability: Once configured, auto mode is stable unless you:
# - Add/remove __init__.py files
# - Restructure package hierarchy


# =============================================================================
# Troubleshooting
# =============================================================================
# Q: My URLs are deeply nested (e.g., /api/myproject/core/utils/helpers/)
# A: Use strip_prefix to remove leading "myproject." → /api/core/utils/helpers/
#
# Q: I want cli.templates.blog grouped as /api/templates/blog/ not /api/cli/templates/blog/
# A: Use mode: "auto" - it detects templates/ has __init__.py and groups under it
#
# Q: How do I keep old URLs working after enabling grouping?
# A: Add redirects in your web server config or use a postprocess hook
#
# Q: Can I use custom group names with auto mode?
# A: No - use mode: "explicit" for custom names
#
# Q: What if multiple prefixes match?
# A: Longest prefix wins (e.g., "cli.templates" beats "cli")
