# Bengal SSG Configuration Example
#
# Bengal uses sensible defaults - you only need to configure what you want to change!
#
# Default settings (no config needed):
# ✅ parallel = true         - Parallel builds for speed
# ✅ incremental = true       - Smart rebuilds (18-42x faster!)
# ✅ minify_html = true       - Smaller pages (15-25% reduction)
# ✅ minify_assets = true     - Optimized CSS/JS
# ✅ fingerprint_assets = true - Cache busting
# ✅ generate_sitemap = true  - SEO ready
# ✅ generate_rss = true      - RSS feed included
# ✅ JSON + LLM output = true - AI-native by default!
# ✅ validate_links = true    - Catch broken links
# ✅ validate_build = true    - Quality checks

[site]
title = "My Site"
baseurl = "https://example.com"
# Note: Theme name is now configured in [theme] section below

[build]
output_dir = "public"

# Fast mode (recommended) - Maximum speed for builds
# Enables quiet output, ensures parallel rendering is on
# Note: To suppress GIL warnings in free-threaded Python, set PYTHON_GIL=0 in your shell
fast_mode = true

# Uncomment to disable default features if needed:
# incremental = false        # Force full rebuilds every time
# minify_html = false        # Keep HTML unminified (for debugging)
# generate_sitemap = false   # Skip sitemap generation
# generate_rss = false       # Skip RSS feed

# Template caching (10-15% faster builds)
# Caches compiled Jinja2 templates to .bengal-cache/templates/
cache_templates = true

# Auto-regenerate autodoc before builds
# Automatically regenerates Python/CLI docs if source files are newer than generated docs
# Only regenerates when needed (smart timestamp checking)
auto_regenerate_autodoc = false  # Set to true for convenience during development

# Output formats (defaults: JSON + LLM text for all pages)
# Uncomment to customize:
# [build.output_formats]
# enabled = false           # Disable all custom formats
# json = false              # Disable per-page JSON
# llm_txt = false           # Disable per-page LLM text
# site_json = false         # Disable site-wide index.json
# site_llm = false          # Disable site-wide llm-full.txt

# Search Page (special page)
# Generated at /search/ by default if template exists
# Uncomment to customize or disable:
# [search]
# enabled = true
# path = "/search/"
# template = "search.html"

# Font Configuration - Automatically downloads and self-hosts Google Fonts
# Simple string format: "FontFamily:weight1,weight2,weight3"
[fonts]
primary = "Inter:400,600,700"        # Body text
heading = "Playfair Display:700"     # Headings
code = "JetBrains Mono:400"          # Code blocks

# Or use detailed dict format for more control:
# [fonts.custom]
# family = "Roboto"
# weights = [300, 400, 700]
# styles = ["normal", "italic"]  # Optional, defaults to ["normal"]

# Generated CSS uses custom properties:
#   --font-primary: 'Inter'
#   --font-heading: 'Playfair Display'
#   --font-code: 'JetBrains Mono'

# Theme Configuration
[theme]
name = "default"  # Which theme to use (default, or name of custom theme in themes/ directory)

# Default appearance mode for new visitors (overridden by localStorage once user makes a choice)
default_appearance = "system"  # Options: "light", "dark", "system" (follows OS preference)

# Default color palette (leave empty for default theme palette)
default_palette = ""  # Options: "" (default), "snow-lynx", or custom palette name
# Example: default_palette = "snow-lynx"  # Warm teal + cream palette for light mode, ice-blue for dark

# Autodoc Configuration
[autodoc.python]
enabled = true
source_dirs = ["bengal"]  # Directories to document
output_dir = "content/api"  # Where to put generated docs
docstring_style = "auto"  # auto, google, numpy, or sphinx

# Files/patterns to exclude
exclude = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

# Member visibility
include_private = false  # Include _private methods
include_special = false  # Include __special__ methods

# Alias and inherited member features (optional, OFF by default)
# Aliases are always detected; inherited members require opt-in
# include_inherited = true  # Show inherited methods from base classes
# alias_strategy = "canonical"  # How to render aliases: canonical, duplicate, list-only

# Per-type control (more granular than global include_inherited)
# [autodoc.python.include_inherited_by_type]
# class = true      # Show inherited methods on classes
# exception = false # Don't show for exceptions

# Future: OpenAPI autodoc
[autodoc.openapi]
enabled = false
# spec_file = "openapi.yaml"
# output_dir = "content/api-docs"

# CLI autodoc
[autodoc.cli]
enabled = true
app_module = "bengal.cli:main"  # module_path:attribute format
output_dir = "content/cli"
framework = "click"  # click, argparse, or typer
include_hidden = false  # Include hidden commands
