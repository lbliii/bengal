---
globs: *.py
description: Core architectural patterns and conventions for Bengal
---

# Architecture Patterns for Bengal

Bengal follows specific architectural patterns to maintain separation of concerns and avoid common pitfalls like God objects.

## Core Principles

### 1. Models Are Passive (No Side Effects)

Core models in `bengal/core/` are data structures only:

```python
# ✅ CORRECT - Models hold data, no I/O
@dataclass
class Page:
    source_path: Path
    content: str
    metadata: dict[str, Any]

    @property
    def title(self) -> str:
        return self.metadata.get("title", "Untitled")

# ❌ WRONG - Models should not perform I/O or logging
@dataclass
class Page:
    def render(self):
        logger.info("Rendering page")  # NO!
        with open(self.output_path, 'w') as f:  # NO!
            f.write(self.html)
```

**Key Rule**: If it logs, does I/O, or has side effects → it belongs in an orchestrator, not a model.

### 2. Orchestrators Handle Operations

All build operations live in `bengal/orchestration/`:

```python
# ✅ CORRECT - Orchestrator handles operations
class RenderOrchestrator:
    @staticmethod
    def render_pages(site: Site) -> None:
        """Render all pages in the site."""
        logger.info(f"Rendering {len(site.pages)} pages")
        for page in site.pages:
            html = TemplateEngine.render(page)
            output_path = site.output_dir / page.url
            output_path.write_text(html)
```

**Delegation Pattern** - Site delegates to orchestrators:

```python
class Site:
    def build(self) -> None:
        """Build the site (delegates to orchestrator)."""
        return BuildOrchestrator.build(self)
```

See: [bengal/core/site.py](mdc:bengal/core/site.py) and [bengal/orchestration/](mdc:bengal/orchestration/)

### 3. Composition Over Inheritance

Use mixins and composition instead of deep inheritance:

```python
# ✅ CORRECT - Composition with mixins
@dataclass
class Page(
    PageMetadataMixin,
    PageNavigationMixin,
    PageComputedMixin,
    PageRelationshipsMixin,
    PageOperationsMixin,
):
    """Page combines focused mixins."""
    core: PageCore
    content: str
    rendered_html: str | None = None

# ❌ WRONG - Deep inheritance hierarchy
class BasePage:
    pass

class ContentPage(BasePage):
    pass

class BlogPage(ContentPage):
    pass

class ArticlePage(BlogPage):  # Too deep!
    pass
```

See: [bengal/core/page/__init__.py](mdc:bengal/core/page/__init__.py)

### 4. Single Responsibility Principle

Each class has one clear purpose:

- **Site**: Root data container
- **Page**: Represents one content file
- **Section**: Represents content directory
- **BuildOrchestrator**: Coordinates build phases
- **RenderOrchestrator**: Handles rendering
- **DiscoveryOrchestrator**: Finds content

### 5. File Size Threshold (400 Lines)

When a file exceeds 400 lines, convert to a package with focused modules:

```
# Before (450 lines)
bengal/core/page.py

# After (converted to package)
bengal/core/page/
├── __init__.py          # Main Page class (50 lines)
├── page_core.py         # Cacheable core data (200 lines)
├── metadata.py          # PageMetadataMixin (80 lines)
├── navigation.py        # PageNavigationMixin (60 lines)
├── computed.py          # PageComputedMixin (100 lines)
└── proxy.py             # PageProxy (150 lines)
```

## Common Patterns

### Strategy Pattern
```python
# Content types use strategy pattern
class ContentStrategy(ABC):
    @abstractmethod
    def get_template(self, page: Page) -> str:
        pass

class BlogStrategy(ContentStrategy):
    def get_template(self, page: Page) -> str:
        return 'blog/post.html'

class DocStrategy(ContentStrategy):
    def get_template(self, page: Page) -> str:
        return 'docs/page.html'
```

### Registry Pattern
```python
# Template functions and content types use registry
class ContentTypeRegistry:
    _strategies: dict[str, ContentStrategy] = {}

    @classmethod
    def register(cls, name: str, strategy: ContentStrategy) -> None:
        cls._strategies[name] = strategy

    @classmethod
    def get(cls, name: str) -> ContentStrategy:
        return cls._strategies[name]
```

### Builder Pattern
```python
# Complex object construction
builder = MenuBuilder('main')
builder.add_from_config(items)
builder.add_from_pages(pages)
menu = builder.build_hierarchy()
```

### Factory Pattern
```python
# Create appropriate parser based on config
def create_markdown_parser(engine: str = 'mistune') -> MarkdownParser:
    if engine == 'mistune':
        return MistuneParser()
    elif engine == 'python-markdown':
        return PythonMarkdownParser()
    else:
        raise ValueError(f"Unknown parser: {engine}")
```

## Data Flow

### Explicit State Management

```python
# ✅ CORRECT - Pass state explicitly
def render_page(page: Page, context: BuildContext) -> str:
    return template.render(page=page, site=context.site)

# ❌ WRONG - Hidden global state
_current_site = None  # Global mutable state

def render_page(page: Page) -> str:
    global _current_site
    return template.render(page=page, site=_current_site)
```

### Single Source of Truth

- **Site** is the root data container
- **Cache** stores paths, not object references
- References reconstructed each build

### Immutability Where Possible

```python
# Content immutable after parsing
@dataclass(frozen=True)
class PageCore(Cacheable):
    source_path: str
    title: str
    date: datetime | None
```

## Avoiding God Objects

**Warning Signs**:
- Class has >400 lines
- Class has >10 public methods
- Class imports from >5 different modules
- Class does multiple unrelated things

**Solution**:
1. Extract mixins for different concerns
2. Delegate operations to specialized classes
3. Use composition instead of adding methods

## Module Organization

```
bengal/
├── core/              # Passive data models (no I/O, no logging)
├── orchestration/     # Build coordination and operations
├── rendering/         # Template and content rendering
├── discovery/         # Content/asset discovery
├── cache/            # Caching infrastructure
├── postprocess/      # Post-processing (sitemap, RSS)
├── health/           # Validation and health checks
├── config/           # Configuration system
├── cli/              # Command-line interface
└── utils/            # Shared utilities
```

## Related Documentation

- [architecture/design-principles.md](mdc:architecture/design-principles.md) - Full design principles
- [architecture/object-model.md](mdc:architecture/object-model.md) - Object model details
- [architecture/orchestration.md](mdc:architecture/orchestration.md) - Orchestration patterns
- [architecture/data-flow.md](mdc:architecture/data-flow.md) - Data flow through system
