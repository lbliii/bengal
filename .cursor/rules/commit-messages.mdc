---
alwaysApply: true
description: Atomic commit message standards for Bengal
---

# Commit Message Standards

Bengal uses descriptive atomic commits that read like an insightful changelog.

## Format

```
<subsystem>: <what changed and why>
```

Or for multi-subsystem changes:

```
<subsystem1>(<component>): <change>; <subsystem2>: <related change>
```

## Subsystem Prefixes

- `core:` - Data models (Page, Site, Section, Asset)
- `orchestration:` - Build coordination
- `rendering:` - Template and content rendering
- `cache:` - Caching system
- `discovery:` - Content/asset discovery
- `config:` - Configuration system
- `cli:` - Command-line interface
- `health:` - Validation and health checks
- `tests:` - Test suite changes
- `docs:` - Documentation updates
- `perf:` - Performance improvements
- `refactor:` - Code refactoring
- `fix:` - Bug fixes

## Examples from Bengal

```bash
# Good examples
git commit -m "core: decouple theme chain/assets resolution from TemplateEngine via utils.theme_resolution; use in Site"

git commit -m "core(server): add Site.reset_ephemeral_state and adopt in dev server; utils: introduce ProgressReporter; orchestration: route streaming output via reporter"

git commit -m "docs(plan): add decoupling roadmap draft with phased actions and value rationale"

git commit -m "orchestration: avoid mutating site.pages during render; pass explicit page list"

git commit -m "cache: add PageCore composition pattern for cacheable metadata"

git commit -m "tests: add integration tests for incremental builds using test-basic root"
```

## Principles

1. **Be descriptive** - Explain what and why, not just "fix bug"
2. **Be specific** - Mention specific files/classes when relevant
3. **Be atomic** - One logical change per commit
4. **Use imperative mood** - "add feature" not "added feature"
5. **Reference issue numbers** - "fix: resolve #123 broken links"

## Related

- See always-applied workspace rule for commit standards
