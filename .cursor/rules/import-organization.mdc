---
globs: *.py
description: Import organization and ordering standards for Bengal
---

# Import Organization for Bengal

Bengal follows strict import ordering for consistency and readability.

## Standard Import Order

```python
# 1. ALWAYS FIRST - Future annotations
from __future__ import annotations

# 2. Standard library imports (alphabetical, grouped by type)
import json
import logging
import sys
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Callable

# 3. Third-party imports (alphabetical)
import click
import jinja2
import yaml
from mistune import Markdown

# 4. Local imports (alphabetical, use absolute paths)
from bengal.core import Page, Site
from bengal.rendering import TemplateEngine
from bengal.utils import normalize_path
```

## Required First Import

**ALWAYS** start Python files with:

```python
from __future__ import annotations
```

This enables:
- Modern type syntax without quotes: `def func() -> dict[str, Any]:`
- Forward references without strings: `parent: Section | None`
- PEP 604 union syntax: `str | int` instead of `Union[str, int]`

## Grouping Rules

### 1. Future Imports (Always First)
```python
from __future__ import annotations
```

### 2. Standard Library (Grouped and Alphabetical)

```python
# First: Regular imports (alphabetical)
import json
import logging
import os
import sys

# Then: From imports (alphabetical by module, then by symbol)
from dataclasses import dataclass, field
from pathlib import Path
from typing import Any, Callable
```

### 3. Third-Party (Alphabetical)

```python
# Regular imports first
import click
import jinja2
import yaml

# Then from imports
from mistune import Markdown
from rich.console import Console
```

### 4. Local (Alphabetical, Absolute Paths)

```python
# Absolute imports from bengal package
from bengal.core import Page, Section, Site
from bengal.orchestration import BuildOrchestrator
from bengal.rendering import TemplateEngine
from bengal.utils import normalize_path
```

## Line Breaks Between Groups

Separate groups with blank lines:

```python
from __future__ import annotations
                                    # Blank line
import json
from pathlib import Path
                                    # Blank line
import click
from rich.console import Console
                                    # Blank line
from bengal.core import Site
from bengal.utils import helpers
```

## Multi-line Imports

For long import lists, use parentheses:

```python
# ✅ CORRECT - Parentheses for multi-line
from bengal.core import (
    Asset,
    Page,
    Section,
    Site,
)

# ✅ CORRECT - One per line, trailing comma
from typing import (
    Any,
    Callable,
    Iterator,
    Protocol,
)

# ❌ WRONG - Backslash continuation
from bengal.core import Asset, Page, \
    Section, Site
```

## Absolute vs Relative Imports

### Use Absolute Imports (Preferred)

```python
# ✅ CORRECT - Absolute import
from bengal.core import Page
from bengal.rendering.pipeline import render_page

# ❌ WRONG - Relative import (avoid in Bengal)
from ..core import Page
from .pipeline import render_page
```

**Exception**: Relative imports OK within a single package for internal imports:

```python
# In bengal/core/page/metadata.py
from .page_core import PageCore  # OK - same package
```

## Wildcard Imports

### Never Use `import *` (except in `__init__.py`)

```python
# ❌ WRONG - Wildcard import
from bengal.core import *

# ✅ CORRECT - Explicit imports
from bengal.core import Page, Section, Site

# ✅ OK in __init__.py for public API
# bengal/core/__init__.py
from bengal.core.page import Page
from bengal.core.section import Section
from bengal.core.site import Site

__all__ = ["Page", "Section", "Site"]
```

## Import Aliases

Use aliases sparingly and consistently:

```python
# ✅ CORRECT - Common abbreviations
import numpy as np
import pandas as pd
from pathlib import Path as P  # Only if needed to avoid collision

# ✅ CORRECT - Disambiguating names
from bengal.core.page import Page
from bengal.core.page.proxy import PageProxy as Proxy

# ❌ WRONG - Unclear abbreviations
from bengal.rendering.template_engine import TemplateEngine as TE
```

## Conditional Imports

For optional dependencies or type checking:

```python
from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    # Type-only imports (not available at runtime)
    from bengal.core import Site
    from jinja2 import Environment

# Regular imports
import sys
```

## Unused Imports

Remove unused imports (ruff will catch these):

```python
# ❌ WRONG - Unused import
from bengal.core import Page, Section  # Section unused
from bengal.utils import normalize_path  # Unused

# ✅ CORRECT - Only import what you use
from bengal.core import Page
```

## __init__.py Imports

In `__init__.py`, re-export public API:

```python
# bengal/core/__init__.py
"""
Core domain models.
"""

from __future__ import annotations

from bengal.core.asset import Asset
from bengal.core.menu import MenuBuilder, MenuItem
from bengal.core.page import Page
from bengal.core.section import Section
from bengal.core.site import Site

__all__ = [
    "Asset",
    "MenuBuilder",
    "MenuItem",
    "Page",
    "Section",
    "Site",
]
```

## Type Imports

For type hints, import from `typing`:

```python
from __future__ import annotations

from typing import (
    Any,
    Callable,
    Dict,  # Use for compatibility if needed
    Iterator,
    Protocol,
)

# But prefer modern syntax where possible
def func() -> dict[str, Any]:  # Lowercase dict, not Dict
    pass
```

## Import Organization Tools

### Ruff (Configured in pyproject.toml)

```bash
# Sort imports automatically
ruff check --select I --fix bengal/

# Or format entire project
ruff format bengal/
```

Configuration in `pyproject.toml`:
```toml
[tool.ruff.lint]
select = [
    "I",   # isort - import sorting
]
```

### Manual Check

```bash
# Ruff will show import order issues
ruff check bengal/

# Example error:
# bengal/core/page.py:5:1: I001 Import block is un-sorted or un-formatted
```

## Examples from Bengal Codebase

### Simple Module
```python
# bengal/utils/normalize.py
from __future__ import annotations

import re
from pathlib import Path
from typing import Any

def normalize_path(path: Path) -> str:
    """Normalize path to URL."""
    return str(path).replace('\\', '/')
```

### Complex Module
```python
# bengal/orchestration/build_orchestrator.py
from __future__ import annotations

import logging
import time
from concurrent.futures import ThreadPoolExecutor
from pathlib import Path
from typing import Any

import click
from rich.console import Console
from rich.progress import Progress

from bengal.cache import BuildCache
from bengal.core import Site
from bengal.discovery import discover_content
from bengal.orchestration.render_orchestrator import RenderOrchestrator
from bengal.rendering import create_template_env
from bengal.utils.logging import setup_logging

logger = logging.getLogger(__name__)
```

## Common Mistakes

### Mistake 1: Wrong Order
```python
# ❌ WRONG - Third-party before standard library
import click
import json  # Should be before click

# ✅ CORRECT
import json
import click
```

### Mistake 2: Missing from __future__
```python
# ❌ WRONG - Missing future import
from typing import Any

def func() -> dict[str, Any]:  # Will fail in Python <3.9
    pass

# ✅ CORRECT
from __future__ import annotations

from typing import Any

def func() -> dict[str, Any]:  # Works!
    pass
```

### Mistake 3: Relative Imports in Tests
```python
# ❌ WRONG - Relative import in test
from ..core import Page

# ✅ CORRECT - Absolute import
from bengal.core import Page
```

## Checklist

Before committing, verify:

- [ ] `from __future__ import annotations` is first line (after module docstring)
- [ ] Imports grouped: future → stdlib → third-party → local
- [ ] Each group alphabetically sorted
- [ ] Blank lines between groups
- [ ] No unused imports
- [ ] Absolute imports used (except internal package imports)
- [ ] No `import *` except in `__init__.py`

## Related Files

- [pyproject.toml](mdc:pyproject.toml) - Ruff configuration
- [CONTRIBUTING.md](mdc:CONTRIBUTING.md) - Import guidelines
